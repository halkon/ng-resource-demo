var compilePath = global.config.compilePath;
var buildPath = global.config.buildPath;
var bowerPath = global.config.bowerPath;
var testPath = global.config.testPath;

var exec = require('child_process').execSync;
var gulp = require('gulp');
var plugins = require('gulp-load-plugins')();
var rm = global.gulpUtil.delete;

var _ = require('lodash');
var es = require('event-stream');
var path = require('path');

// clean the buildPath directory
gulp.task('build:clean', function () {
    return gulp.src(buildPath + '/*').pipe(rm());
});//build:clean

gulp.task('build', [
        'compile:build',
        'build:clean',
        'build:images',
        'build:fonts',
        'karma:build'
    ], function () {
    var assets = plugins.useref.assets();

    return gulp.src(compilePath + '/index.html')
        .pipe(assets) // scripts & stylesheets
        .pipe(plugins.if('*.js', plugins.uglify())) // minify JS
        .pipe(plugins.if('*.css', plugins.csso()))  // minify CSS
        .pipe(plugins.rev())
        .pipe(assets.restore())
        .pipe(plugins.useref())
        .pipe(plugins.revReplace())
        .pipe(gulp.dest(buildPath))
        .pipe(plugins.rev.manifest('manifest.json'))
        // The goal of the next series of pipes is to modify the rev file
        // to be more interesting when checking it against `/healthz` endpoint
        // The output of these will look like:
        // {
        //   "branch": "remotes/origin/ORGN-287_healthz-metadata",
        //   "sha": "9b28765adee12fe8e4bee0aadc6c56f2cd753d02",
        //   "file-revs": [
        //     "styles/application-449310d9.css",
        //     "styles/vendor-9bdc0f34.css",
        //     "scripts/application-5500aadd.js",
        //     "scripts/vendor-3c89f45c.js"
        //   ],
        //   "build-date": "2016-12-01T20:56:21.632Z"
        // }

        // Return a stream that will be called with the File Buffer generated by
        // gulp-rev.manifest with es.map
        .pipe(es.map(function (data, cb) {
            // Let's parse the data into a json object and pass it to our modifier
            var revData = JSON.parse(data.contents.toString());

            var manifest = {};
            // Let's attempt to get information from our git-manifest script
            try {
                // Let's attempt a read, we use `process.cwd()` in order to
                // read from the root of where gulp is being called, which is the top
                // part of the project
                manifest = JSON.parse(exec(path.join(process.cwd(), 'bin/git-manifest')));
            } catch (e) {
                // We can't read stuff, just fill it in and this denotes an error reading our
                // manifest.json
                manifest['sha'] = 'N/A';
                manifest['branch'] = 'N/A';
            }
            // Create our new manifest object, extending it with the attempts to read from
            // manifest.json
            _.extend(manifest, {
                'file-revs': _.values(revData),
                'build-date': (new Date()).toISOString()
            });
            // Replace the contents of our file buffer with our modified data
            data.contents = new Buffer(JSON.stringify(manifest, null, '  '));
            // Return to the stream
            cb(null, data);
        }))
        .pipe(gulp.dest(buildPath));
});//build

// compress/minify all images
gulp.task('build:images', ['compile:build'], function (done) {
    // Reference for optimization levels:
    // https://github.com/gruntjs/grunt-contrib-imagemin#optimizationlevel-png
    // var imageminOptions = {
    //     optimizationLevel: 3,
    //     progressive: true,
    //     interlaced: true
    // };

    // Encore currently uses relative paths for its images,
    // so they must be served from the same directory as the css.
    // In the future, a CDN may be added, making this part of the task irrelevant.
    gulp.src(bowerPath + '/encore-ui/images/*')
        .pipe(gulp.dest(buildPath + '/styles/images'));

    gulp.src(compilePath + '/**/images/**/*')
        .pipe(gulp.dest(buildPath));

    done();
});//build:images

gulp.task('build:fonts', ['compile:build'], function () {
    var fontPaths = [
        bowerPath + '/font-awesome/fonts/*',
        compilePath + '/src/common/assets/fonts/*'
    ];
    return gulp.src(fontPaths)
        .pipe(gulp.dest(buildPath + '/fonts'))
        .pipe(gulp.dest(buildPath + '/styles/fonts'));
});//build:fonts

gulp.task('build:docs', ['compile:build'], function () {
    // TODO: task to build ngdocs in {global.config.docsPath}
});//build:docs

gulp.task('build:mocks', function () {
    gulp.src(testPath + '/api-mocks/**/*.yaml')
        .pipe(plugins.concat('mocks.yaml'))
        .pipe(plugins.yaml({ space: 2 }))
        .pipe(gulp.dest('.'));
});